import { Injectable, OnModuleInit } from '@nestjs/common';
import * as AWS from 'aws-sdk';
import redis from 'redis';

@Injectable()
export class ElastiCacheService implements OnModuleInit {
  private readonly client: AWS.ElastiCache;
  private redis: any;

  constructor() {
    this.client = new AWS.ElastiCache({
      region: 'ap-southeast-1',
      credentials: {
        // accessKeyId: process.env.AWS_ACCESS_KEY_ID,
        // secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
        accessKeyId: 'AKIA224DOSWBTDQUXDM2',
        secretAccessKey: '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',
      },
    });

    console.log('the client is:')
    console.log(this.client);
  }

  async onModuleInit(): Promise<void> {
    const params: AWS.ElastiCache.Types.DescribeCacheClustersMessage = {
      CacheClusterId: 'filesharingapp-redis',
    };

    const result = await this.client.describeCacheClusters(params).promise();
    console.log("result is:")
    console.log(result)
    if (result.CacheClusters.length === 0) {
      throw new Error(`Cache cluster not found: ${params.CacheClusterId}`);
    }

    const endpoint = result.CacheClusters[0].ConfigurationEndpoint.Address;

    // this.redis = require('redis').createClient({
    //   // host: process.env.AWS_ELASTICACHE_ENDPOINT,
    //   // host: "filesharingappmemcache.i72ox6.cfg.apse1.cache.amazonaws.com:11211",
    //   host: "filesharingapp-redis.i72ox6.clustercfg.apse1.cache.amazonaws.com:6379",
    // });

    this.redis = redis.createClient({
      host: 'filesharingapp-redis.i72ox6.clustercfg.apse1.cache.amazonaws.com:6379',
    });
  }

  async get(key: string): Promise<string> {
    return new Promise((resolve, reject) => {
      this.redis.get(key, (err, result) => {
        if (err) {
          reject(err);
        } else {
          resolve(result);
        }
      });
    });
  }

  async set(key: string, value: string): Promise<void> {
    return new Promise((resolve, reject) => {
      this.redis.set(key, value, (err) => {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    });
  }
}

// // Elasticache - MemCache
// import * as Memcached from 'memcached-promisify';
// @Injectable()
// export class MemcachedService {
//   private memcached: Memcached;

//   constructor() {
//     const endpoint = 'your-cluster-endpoint-here';
//     const port = 11211;

//     this.memcached = new Memcached(`${endpoint}:${port}`, {
//       timeout: 2000,
//       retries: 3,
//       retry: 500,
//     });
//   }

//   public async set(key: string, value: any, ttl: number): Promise<void> {
//     await this.memcached.set(key, value, ttl);
//   }

//   public async get(key: string): Promise<any> {
//     return await this.memcached.get(key);
//   }
// }
